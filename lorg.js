// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Config = function() {
	this.totalName = "TOTAL";
	this.toJson = false;
	this.prettify = false;
	this.addIndent = true;
	this.displayTotalNode = true;
	this.displayIgnoredAndCalculated = true;
	this.displayIgnored = true;
};
Config.__name__ = true;
Config.prototype = {
	displayIgnored: null
	,displayIgnoredAndCalculated: null
	,displayTotalNode: null
	,addIndent: null
	,prettify: null
	,toJson: null
	,totalName: null
	,__class__: Config
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Library = $hx_exports["Lorg"] = function() { };
Library.__name__ = true;
Library.createParser = function(config) {
	return new Parser(config);
};
Library.createConfig = function() {
	return new Config();
};
Math.__name__ = true;
var Node = function(title) {
	this.title = title;
	this.children = [];
	this.units = new haxe_ds_StringMap();
};
Node.__name__ = true;
Node.prototype = {
	title: null
	,children: null
	,units: null
	,__class__: Node
};
var Parser = function(config) {
	this.config = config;
	this.reset();
};
Parser.__name__ = true;
Parser.prototype = {
	totalNode: null
	,existingUnits: null
	,sortedUnitNames: null
	,config: null
	,hasError: null
	,errorMessage: null
	,reset: function() {
		this.totalNode = new Node(this.config.totalName);
		this.existingUnits = new haxe_ds_StringMap();
		this.sortedUnitNames = [];
		this.hasError = false;
		this.errorMessage = "";
	}
	,parse: function(content) {
		try {
			this.reset();
			this.extractTotalNodeFromText(content);
			this.calculateNodeUnits(this.totalNode,new haxe_ds_StringMap());
			var name = this.existingUnits.keys();
			while(name.hasNext()) {
				var name1 = name.next();
				this.sortedUnitNames.push(name1);
				this.sortedUnitNames.sort(function(a,b) {
					if(a < b) {
						return -1;
					} else {
						return 1;
					}
				});
			}
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			this.hasError = true;
			this.errorMessage = Std.string(e1);
		}
	}
	,getResultAsString: function() {
		var _gthis = this;
		var nodesToConvert = this.getNodesToConvert();
		var convert = this.config.prettify ? function(node) {
			return _gthis.convertNodeToStringPretty(node);
		} : function(node1) {
			return _gthis.convertNodeToStringSimple(node1);
		};
		var lines = [];
		var _g = 0;
		var _g1 = this.getNodesToConvert();
		while(_g < _g1.length) {
			var node2 = _g1[_g];
			++_g;
			var nodeLines = convert(node2);
			var _g2 = 0;
			while(_g2 < nodeLines.length) {
				var line = nodeLines[_g2];
				++_g2;
				lines.push(line);
			}
		}
		return lines.join("\n");
	}
	,getResultAsJson: function() {
		var nodesToConvert = this.getNodesToConvert();
		var spaces = this.config.prettify ? "    " : null;
		return haxe_format_JsonPrinter.print(nodesToConvert,null,spaces);
	}
	,getNodesToConvert: function() {
		if(this.config.displayTotalNode) {
			return [this.totalNode];
		} else {
			return this.totalNode.children;
		}
	}
	,extractTotalNodeFromText: function(content) {
		var lines = content.split("\n");
		var i = 0;
		while(i < lines.length) if(this.isNodeDefinition(lines[i])) {
			var result = this.parseNode(lines,i);
			i = result.currentLineIndex;
			this.totalNode.children.push(result.node);
		} else {
			++i;
		}
	}
	,calculateNodeUnits: function(node,ignoredUnits) {
		var calculatedUnitNames = [];
		var name = this.existingUnits.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this = node.units;
			if(!(__map_reserved[name1] != null ? _this.existsReserved(name1) : _this.h.hasOwnProperty(name1))) {
				var this1 = node.units;
				var v = new Unit(name1,0,false);
				var _this1 = this1;
				if(__map_reserved[name1] != null) {
					_this1.setReserved(name1,v);
				} else {
					_this1.h[name1] = v;
				}
				calculatedUnitNames.push(name1);
			}
		}
		var name2 = ignoredUnits.keys();
		while(name2.hasNext()) {
			var name3 = name2.next();
			var _this2 = node.units;
			(__map_reserved[name3] != null ? _this2.getReserved(name3) : _this2.h[name3]).isIgnored = true;
		}
		if(node.children.length == 0) {
			return;
		}
		var childrenUnitsToIgnore = new haxe_ds_StringMap();
		var name4 = node.units.keys();
		while(name4.hasNext()) {
			var name5 = name4.next();
			var tmp;
			var _this3 = node.units;
			if(!(__map_reserved[name5] != null ? _this3.getReserved(name5) : _this3.h[name5]).isReal) {
				var _this4 = node.units;
				tmp = (__map_reserved[name5] != null ? _this4.getReserved(name5) : _this4.h[name5]).isIgnored;
			} else {
				tmp = true;
			}
			if(tmp) {
				if(__map_reserved[name5] != null) {
					childrenUnitsToIgnore.setReserved(name5,true);
				} else {
					childrenUnitsToIgnore.h[name5] = true;
				}
			}
		}
		var _g = 0;
		var _g1 = node.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.calculateNodeUnits(child,childrenUnitsToIgnore);
			var _g2 = 0;
			while(_g2 < calculatedUnitNames.length) {
				var name6 = calculatedUnitNames[_g2];
				++_g2;
				var _this5 = node.units;
				var tmp1 = __map_reserved[name6] != null ? _this5.getReserved(name6) : _this5.h[name6];
				var _this6 = child.units;
				tmp1.value += (__map_reserved[name6] != null ? _this6.getReserved(name6) : _this6.h[name6]).value;
			}
		}
	}
	,shouldHideUnit: function(unit) {
		if(!(unit.isIgnored && !this.config.displayIgnored)) {
			if(unit.isIgnored && !unit.isReal) {
				return !this.config.displayIgnoredAndCalculated;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,unitToString: function(unit) {
		var str = "$ " + unit.name + ": " + unit.value;
		if(!unit.isReal) {
			str += " [Calculated]";
		}
		if(unit.isIgnored) {
			str += " [Ignored]";
		}
		return str;
	}
	,convertNodeToStringSimple: function(node,indentLevel) {
		if(indentLevel == null) {
			indentLevel = 0;
		}
		var lines = [];
		var heading = "#";
		var indent = "";
		var _g = 0;
		var _g1 = indentLevel;
		while(_g < _g1) {
			var i = _g++;
			heading += "#";
			indent += "  ";
		}
		if(!this.config.addIndent) {
			indent = "";
		}
		lines.push("" + indent + heading + " " + node.title);
		var _g2 = 0;
		var _g3 = this.sortedUnitNames;
		while(_g2 < _g3.length) {
			var name = _g3[_g2];
			++_g2;
			var _this = node.units;
			var unit = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
			if(unit.isIgnored && !this.config.displayIgnored || unit.isIgnored && !unit.isReal && !this.config.displayIgnoredAndCalculated) {
				continue;
			}
			var _this1 = node.units;
			var unit1 = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
			var str = "$ " + unit1.name + ": " + unit1.value;
			if(!unit1.isReal) {
				str += " [Calculated]";
			}
			if(unit1.isIgnored) {
				str += " [Ignored]";
			}
			var unitStr = str;
			if(this.config.addIndent) {
				lines.push("" + indent + "  " + unitStr);
			} else {
				lines.push(unitStr);
			}
		}
		var _g4 = 0;
		var _g5 = node.children.length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			var child = node.children[i1];
			var childLines = this.convertNodeToStringSimple(child,indentLevel + 1);
			var _g41 = 0;
			while(_g41 < childLines.length) {
				var line = childLines[_g41];
				++_g41;
				lines.push(line);
			}
		}
		return lines;
	}
	,convertNodeToStringPretty: function(node,indentLevel,prefixFromParent,hasNextSibling) {
		if(hasNextSibling == null) {
			hasNextSibling = false;
		}
		if(prefixFromParent == null) {
			prefixFromParent = "";
		}
		if(indentLevel == null) {
			indentLevel = 0;
		}
		var lines = [];
		if(indentLevel == 0) {
			lines.push("" + node.title);
		} else if(hasNextSibling) {
			lines.push("" + prefixFromParent + "├── " + node.title);
		} else {
			lines.push("" + prefixFromParent + "└── " + node.title);
		}
		var prefixForNextLines = "";
		if(indentLevel == 0) {
			prefixForNextLines = "";
		} else {
			var toAdd = hasNextSibling ? "│   " : "    ";
			prefixForNextLines = prefixFromParent + toAdd;
		}
		var _g = 0;
		var _g1 = this.sortedUnitNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var _this = node.units;
			var unit = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
			if(unit.isIgnored && !this.config.displayIgnored || unit.isIgnored && !unit.isReal && !this.config.displayIgnoredAndCalculated) {
				continue;
			}
			var _this1 = node.units;
			var unit1 = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
			var str = "$ " + unit1.name + ": " + unit1.value;
			if(!unit1.isReal) {
				str += " [Calculated]";
			}
			if(unit1.isIgnored) {
				str += " [Ignored]";
			}
			var unitStr = str;
			if(node.children.length != 0) {
				lines.push("" + prefixForNextLines + "│ " + unitStr);
			} else {
				lines.push("" + prefixForNextLines + "  " + unitStr);
			}
		}
		var _g2 = 0;
		var _g3 = node.children.length;
		while(_g2 < _g3) {
			var i = _g2++;
			var child = node.children[i];
			var childHasNextSibling = i < node.children.length - 1;
			var childLines = this.convertNodeToStringPretty(child,indentLevel + 1,prefixForNextLines,childHasNextSibling);
			var _g21 = 0;
			while(_g21 < childLines.length) {
				var line = childLines[_g21];
				++_g21;
				lines.push(line);
			}
		}
		return lines;
	}
	,parseNode: function(lines,i) {
		if(i >= lines.length) {
			throw new js__$Boot_HaxeError(Parser.ERROR_UNKNOWN_MESSAGE);
		}
		if(!this.isNodeDefinition(lines[i])) {
			throw new js__$Boot_HaxeError(Parser.ERROR_UNKNOWN_MESSAGE);
		}
		var node = new Node(this.getNodeTitle(lines[i]));
		var currentLevel = this.countNodeLevel(lines[i]);
		var currentLineIndex = i + 1;
		while(currentLineIndex < lines.length) {
			var currentLine = lines[currentLineIndex];
			if(this.isNodeDefinition(currentLine)) {
				var newNodeLevel = this.countNodeLevel(currentLine);
				if(newNodeLevel > currentLevel) {
					if(newNodeLevel > currentLevel + 1) {
						throw new js__$Boot_HaxeError("Line " + (currentLineIndex + 1) + ": Expected node of level " + (currentLevel + 1) + " but got one of level " + newNodeLevel + ".");
					}
					var childResult = this.parseNode(lines,currentLineIndex);
					node.children.push(childResult.node);
					currentLineIndex = childResult.currentLineIndex;
				} else {
					return { node : node, currentLineIndex : currentLineIndex};
				}
			} else {
				if(this.isUnitDefinition(currentLine)) {
					try {
						var unit = this.parseUnit(currentLine);
						var k = unit.name;
						var _this = node.units;
						if(__map_reserved[k] != null) {
							_this.setReserved(k,unit);
						} else {
							_this.h[k] = unit;
						}
					} catch( e ) {
						throw new js__$Boot_HaxeError("Line " + (currentLineIndex + 1) + ": " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
					}
				}
				++currentLineIndex;
			}
		}
		return { node : node, currentLineIndex : currentLineIndex};
	}
	,parseUnit: function(line) {
		var name = this.getUnitName(line);
		var value = this.getUnitValue(line);
		var _this = this.existingUnits;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			var _this1 = this.existingUnits;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,true);
			} else {
				_this1.h[name] = true;
			}
		}
		return new Unit(name,value);
	}
	,getNodeDefinitionRegex: function() {
		return new EReg("^\\s*(#+)\\s*(.+)","");
	}
	,isNodeDefinition: function(line) {
		return this.getNodeDefinitionRegex().match(line);
	}
	,countNodeLevel: function(line) {
		var r = this.getNodeDefinitionRegex();
		if(!r.match(line)) {
			return 0;
		}
		return r.matched(1).length;
	}
	,getNodeTitle: function(line) {
		var r = this.getNodeDefinitionRegex();
		if(!r.match(line)) {
			return "";
		}
		return r.matched(2);
	}
	,getUnitDefinitionRegex: function() {
		return new EReg("^\\s*\\$\\s*(.+)\\s*:\\s*(.+)","");
	}
	,isUnitDefinition: function(line) {
		return this.getUnitDefinitionRegex().match(line);
	}
	,getUnitName: function(line) {
		var r = this.getUnitDefinitionRegex();
		if(!r.match(line)) {
			return "";
		}
		return r.matched(1);
	}
	,getUnitValue: function(line) {
		var r = this.getUnitDefinitionRegex();
		if(!r.match(line)) {
			return 0;
		}
		var valueString = r.matched(2);
		try {
			var value = parseFloat(valueString);
			return value;
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			throw new js__$Boot_HaxeError("Cannot convert value \"" + valueString + "\".");
		}
	}
	,__class__: Parser
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = true;
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var Unit = function(name,value,isReal) {
	if(isReal == null) {
		isReal = true;
	}
	this.name = name;
	this.value = value;
	this.isReal = isReal;
	this.isIgnored = false;
};
Unit.__name__ = true;
Unit.prototype = {
	name: null
	,value: null
	,isReal: null
	,isIgnored: null
	,__class__: Unit
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_format_JsonPrinter = function(replacer,space) {
	this.replacer = replacer;
	this.indent = space;
	this.pretty = space != null;
	this.nind = 0;
	this.buf = new StringBuf();
};
haxe_format_JsonPrinter.__name__ = true;
haxe_format_JsonPrinter.print = function(o,replacer,space) {
	var printer = new haxe_format_JsonPrinter(replacer,space);
	printer.write("",o);
	return printer.buf.b;
};
haxe_format_JsonPrinter.prototype = {
	buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
	,write: function(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			var v1 = isFinite(v) ? Std.string(v) : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			this.fieldsString(v,Reflect.fields(v));
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			var c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				var v2 = v;
				this.buf.b += String.fromCodePoint(91);
				var len = v2.length;
				var last = len - 1;
				var _g1 = 0;
				var _g11 = len;
				while(_g1 < _g11) {
					var i = _g1++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						var v3 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
						this.buf.b += Std.string(v3);
					}
					this.write(i,v2[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							var v4 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
							this.buf.b += Std.string(v4);
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				var v5 = v;
				var o = { };
				var k1 = v5.keys();
				while(k1.hasNext()) {
					var k2 = k1.next();
					o[k2] = __map_reserved[k2] != null ? v5.getReserved(k2) : v5.h[k2];
				}
				var v6 = o;
				this.fieldsString(v6,Reflect.fields(v6));
			} else if(c == Date) {
				var v7 = v;
				this.quote(HxOverrides.dateStr(v7));
			} else {
				this.classString(v);
			}
			break;
		case 7:
			var _g12 = _g.e;
			var i1 = v._hx_index;
			this.buf.b += Std.string(i1);
			break;
		case 8:
			this.buf.b += "\"???\"";
			break;
		}
	}
	,classString: function(v) {
		this.fieldsString(v,Type.getInstanceFields(js_Boot.getClass(v)));
	}
	,fieldsString: function(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		var len = fields.length;
		var last = len - 1;
		var first = true;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var f = fields[i];
			var value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(first) {
				this.nind++;
				first = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				var v1 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
				this.buf.b += Std.string(v1);
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) {
					this.buf.b += String.fromCodePoint(10);
				}
				if(this.pretty) {
					var v2 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
					this.buf.b += Std.string(v2);
				}
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	,quote: function(s) {
		this.buf.b += String.fromCodePoint(34);
		var i = 0;
		while(true) {
			var c = s.charCodeAt(i++);
			if(c != c) {
				break;
			}
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	,__class__: haxe_format_JsonPrinter
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Parser.ERROR_UNKNOWN_MESSAGE = "Unknown internal error.";
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=lorg.js.map